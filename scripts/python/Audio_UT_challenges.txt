We succedded to create a working testing program.
It takes files generated by sdrdab-cli and reference (from Matlab) as input.
We encountered two problems, which hamper full audio verification.
For now, the audio file from sdrdab-cli is retrieved with the help of a hack.
In audio_decoder.cc file:

AudioDecoder::AudioDecoder(float threshold, size_t length, int type) {
    src_ = new RingSrc(threshold, length);
    sink_ = new NullSink();

    player_ = new Player(src_, type);
    player_->AddSink(sink_);

    myFile_.open ("out.aac", std::ios::out | std::ios::binary);    
}

size_t AudioDecoder::Write(uint8_t *buffer, size_t length) {
    myFile_.write((char*)buffer, length);
    // myFile_.write(static_cast<const char*>(buffer), length);
    return src_->Write(buffer, length);
}

Why do we do that?
The DAB stream passed to multiplex has a bitrate of 128 kbps
and for DAB+ depending on the protection type: 88 kbps or 96 kbps.
sdrdab-cli always returns audio streams with bitrate of 112 kbps.
Gstreamer is guilty here.
In the implemented hack the stream is saved before Gstreamer.
Then it has a proper bitrate. We would like to get a proper file
without any hacks using sdrdab-cli "-o".

The next issue is the reference file.
For now, we have files retrieved with the help of Matlab code as reference.

We used program: DAB_ALL_RT.m
after apllying some changes to DAB_file_info.m file:
setting proper if control statements and rewriting multiplex parameters.

Data for DAB_file_info.m can be gained by running sdrdab-cli
on the multiplex file with "-v" option.

It is not a perfect solution.
There is also a problem with the bitrate, for DAB+ it returns stream of ~90 kbps
which differs from the one given for creating the multiplex.
For DAB we succeded to gain proper bitrate of 128 kbps.
Two files have been compared.
Possibly, in the future there will be an open software which will allow to get proper
audio stream to fully verify the performance of sdrdab-cli program.
